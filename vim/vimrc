" Created by belltoy<belltoy@gmail.com>
" Homepage: http://belltoy.net/
" -----------------------------------------------------------------------------
" |                            VIM Settings                                   |
" |                   (see gvimrc for gui vim settings)                       |
" |                                                                           |
" | Some highlights:                                                          |
" |   jj = <esc>  Very useful for keeping your hands on the home row          |
" |   ,n = toggle NERDTree off and on                                         |
" |                                                                           |
" |  ",f = fuzzy find all files                                               |
" |  ",b = fuzzy find in all buffers                                          |
" |   ,f = toggle tag list window                                             |
" |                                                                           |
" |   hh = inserts '=>'                                                       |
" |   aa = inserts '@'                                                        |
" |                                                                           |
" |   ,h = new horizontal window                                              |
" |   ,v = new vertical window                                                |
" |                                                                           |
" |   ,i = toggle invisibles                                                  |
" |   ,, = set nohlsearch                                                     |
" |                                                                           |
" |   enter and shift-enter = adds a new line after/before the current line   |
" |                                                                           |
" |   :call Tabstyle_tabs = set tab to real tabs                              |
" |   :call Tabstyle_spaces = set tab to 2 spaces                             |
" |                                                                           |
" | Put machine/user specific settings in ~/.vimrc.local                      |
" -----------------------------------------------------------------------------

set nocompatible
call plug#begin('~/.vim/bundle')

Plug 'vim-scripts/L9'

Plug 'thisivan/vim-bufexplorer'
Plug 'tmux-plugins/vim-tmux'
Plug 'christoomey/vim-tmux-navigator'
nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
Plug 'tpope/vim-fugitive'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'mattn/emmet-vim'
Plug 'airblade/vim-gitgutter'
Plug 'mattn/gist-vim'
Plug 'tpope/vim-surround'
Plug 'pearofducks/ansible-vim'

Plug 'junegunn/vim-easy-align'

Plug 'scrooloose/nerdtree'
" Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tomtom/tcomment_vim'
Plug 'mustache/vim-mustache-handlebars'
Plug 'jaredgorski/spacecamp'
Plug 'abra/vim-obsidian'
" Plug 'morhetz/gruvbox'
Plug 'belltoy/gruvbox'
Plug 'ctrlpvim/ctrlp.vim'
" Plug 'mhinz/vim-grepper'
" If you prefer lazy loading:
" Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }
" Plug 'jremmen/vim-ripgrep'
" let g:grepper = {
"     \ 'tools': ['rg', 'ack', 'grep', 'git'],
"     \ }
" let g:grepper.highlight = 1
" let g:grepper.jump = 1
" " nnoremap <leader>g :Grepper<cr>
" let g:grepper.prompt_mapping_tool = '<leader>g'

let g:ctrlp_map = '<Leader>t'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_custom_ignore = {
    \ 'file': '\v(\.beam)$'
    \ }
"Plug 'rizzatti/funcoo.vim'
"Plug 'rizzatti/dash.vim'
Plug 'asins/vimcdoc'

Plug 'terryma/vim-multiple-cursors'
" Default mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

Plug 'Raimondi/delimitMate'
Plug 'mattn/webapi-vim'


" " coc
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
" " Use <c-space> to trigger completion.
" inoremap <silent><expr> <c-space> coc#refresh()
" " Use `[g` and `]g` to navigate diagnostics
" " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
" nmap <silent> [g <Plug>(coc-diagnostic-prev)
" nmap <silent> ]g <Plug>(coc-diagnostic-next)
"
" " GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
" nnoremap <silent> K :call <SID>show_documentation()<CR>

" function! s:show_documentation()
"   if (index(['vim','help'], &filetype) >= 0)
"     execute 'h '.expand('<cword>')
"   else
"     call CocAction('doHover')
"   endif
" endfunction

" snipmate
" VimL only
" Plug 'MarcWeber/vim-addon-mw-utils'
" Plug 'tomtom/tlib_vim'
" Plug 'garbas/vim-snipmate'

" ultisnips need python support
Plug 'SirVer/ultisnips'
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" Optional:
Plug 'honza/vim-snippets'

" Press enter key to trigger snippet expansion
" The parameters are the same as `:help feedkeys()`

" c-j c-k for moving in snippet
" let g:UltiSnipsExpandTrigger		= "<Plug>(ultisnips_expand)"
let g:UltiSnipsJumpForwardTrigger	= "<c-j>"
let g:UltiSnipsJumpBackwardTrigger	= "<c-k>"
let g:UltiSnipsRemoveSelectModeMappings = 0

" Language syntax support
" Plug 'jceb/vim-orgmode'
Plug 'hdima/python-syntax'
let python_highlight_all = 1

Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_fenced_languages = ['clj=clojure']

" Plug 'tpope/vim-markdown'

" Plug 'gabrielelana/vim-markdown'
" Plug 'hallison/vim-markdown'

Plug 'vmchale/just-vim'
Plug 'elzr/vim-json'
let g:vim_json_syntax_conceal = 0
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
let g:go_def_mapping_enabled = 0 " Disabling vim-go mapping `gd` for go to definition add this line to your ~/.vimrc
" let g:go_def_mode='gopls'
" let g:go_info_mode='gopls'
" let g:go_fmt_autosave = 0
" let g:go_bin_path = expand("~/.gotools")
Plug 'uarun/vim-protobuf'
Plug 'othree/html5.vim'
Plug 'aliva/vim-fish'
" Plug 'digitaltoad/vim-jade'
Plug 'digitaltoad/vim-pug'
Plug 'groenewege/vim-less'
Plug 'kchmck/vim-coffee-script'

" Erlang Support
Plug 'vim-erlang/vim-erlang-tags'
Plug 'vim-erlang/vim-erlang-runtime'
" Plug 'vim-erlang/vim-erlang-omnicomplete'
" Plug 'vim-erlang/vim-erlang-compiler'
Plug 'vim-erlang/erlang-motions.vim'
Plug 'vim-erlang/vim-erlang-skeletons'
let g:erl_tpl_dir = $HOME . "/.vim/ftplugin/erlang/templates"

Plug 'elixir-lang/vim-elixir'
Plug 'slashmili/alchemist.vim'
Plug 'thinca/vim-ref'
let g:ref_man_cmd = "man 3"
Plug 'keith/swift.vim'
Plug 'kelan/gyp.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'rust-lang/rust.vim'
Plug 'arzg/vim-rust-syntax-ext'
" Plug 'racer-rust/vim-racer'

" Gleam Language support
Plug 'gleam-lang/gleam.vim'

"" 开启rust的自动reformat的功能
let g:rustfmt_autosave = 0
let g:formatdef_rustfmt = '"rustfmt"'
let g:formatters_rust = ['rustfmt']
Plug 'Chiel92/vim-autoformat'
" let g:racer_cmd = "~/.cargo/bin/racer"
" let g:racer_experimental_completer = 1
" let $RUST_SRC_PATH="<path-to-rust-srcdir>/src/"
" au FileType rust nmap gd <Plug>(rust-def)
" au FileType rust nmap gs <Plug>(rust-def-split)
" au FileType rust nmap gx <Plug>(rust-def-vertical)
" au FileType rust nmap K <Plug>(rust-doc)

Plug 'isRuslan/vim-es6'
Plug 'othree/yajs.vim'
Plug 'othree/es.next.syntax.vim'
Plug 'cespare/vim-toml'
Plug 'mileszs/ack.vim'
let g:ackprg = 'ag --nogroup --nocolor --column'
Plug 'bronson/vim-trailing-whitespace'

Plug 'leafgarland/typescript-vim'
Plug 'einars/js-beautify'

"""""""""""" Clojure """""""""""""""
Plug 'guns/vim-clojure-static'
Plug 'tpope/vim-salve'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fireplace'
Plug 'luochen1990/rainbow'
let g:rainbow_conf = {
	\	'separately': {
	\		'nerdtree': 0,
	\	}
	\}
let g:rainbow_active=1

Plug 'jaredgorski/spacecamp'

Plug 'guns/vim-sexp',    {'for': 'clojure'}
Plug 'liquidz/vim-iced', {'for': 'clojure'}

if (has("nvim"))
    Plug 'Olical/conjure'
endif

Plug 'eraserhd/parinfer-rust', {'do': 'cargo build --release'}

augroup VIM_SEXP_MAPPING
    autocmd!
    autocmd FileType clojure,scheme,lisp,timl call s:vim_sexp_mappings()
augroup END

" Plug 'junegunn/rainbow_parentheses.vim'

" Always On:
" au VimEnter * RainbowParenthesesToggle
" autocmd VimEnter,BufRead,BufWinEnter,BufNewFile * RainbowParenthesesToggle
" autocmd VimEnter,BufRead,BufWinEnter,BufNewFile * RainbowToggle
" autocmd VimEnter,BufRead,BufWinEnter,BufNewFile * RainbowParentheses
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
" au Syntax * RainbowParenthesesLoadRound
" au Syntax * RainbowParenthesesLoadSquare
" au Syntax * RainbowParenthesesLoadBraces
" " Rainbow Parentheses options {
"     function! Config_Rainbow()
"         call rainbow_parentheses#load(0) " Load Round brackets
"         call rainbow_parentheses#load(1) " Load Square brackets
"         call rainbow_parentheses#load(2) " Load Braces
"         autocmd! TastetheRainbow VimEnter * call Load_Rainbow() " 64bit Hack - Set VimEnter after syntax load
"     endfunction
"
"     function! Load_Rainbow()
"         call rainbow_parentheses#activate()
"     endfunction
"
"     augroup TastetheRainbow
"         autocmd!
"         autocmd Syntax * call Config_Rainbow() " Load rainbow_parentheses on syntax load
"         autocmd VimEnter,BufRead,BufWinEnter,BufNewFile * call Load_Rainbow()
"     augroup END
"
"     " rainbow_parentheses toggle
"     nnoremap <silent> <Leader>t :call rainbow_parentheses#toggle()<CR>
" " }

Plug 'guns/vim-clojure-highlight'
Plug 'vim-scripts/paredit.vim'
Plug 'derekwyatt/vim-scala'
Plug 'artur-shaik/vim-javacomplete2'
Plug 'davidzchen/jproperties.vim'

let g:clojure_syntax_keywords = {
    \ 'clojureMacro': ["defproject", "defcustom", "defspout", "defbolt"],
    \ 'clojureFunc': ["string/join", "string/replace"]
    \ }
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

" Maybe Conflict with SirVer/ultisnips
Plug 'editorconfig/editorconfig-vim'

" << LSP >> {{{

" Plug 'autozimu/LanguageClient-neovim', {
"     \ 'branch': 'next',
"     \ 'do': 'bash install.sh',
"     \ }

" Use release branch (recommend)
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Plug 'elixir-lsp/coc-elixir', {'do': 'yarn install && yarn prepack'}

let g:NERDTreeGitStatusWithFlags = 1


" (Optional) Multi-entry selection UI.

" (Completion plugin option 1)
if has('nvim')
else
    Plug 'roxma/vim-hug-neovim-rpc'
    Plug 'roxma/nvim-yarp'
endif

" A solid language pack for Vim.
Plug 'sheerun/vim-polyglot'
" colorscheme
" <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Plug 'jdkanani/vim-material-theme'
Plug 'altercation/vim-colors-solarized'
let g:solarized_termcolors=256
Plug 'tomasr/molokai'
Plug 'morhetz/gruvbox'
let g:gruvbox_contrast_dark='dark'
Plug 'tsiemens/vim-aftercolors'
Plug 'joshdick/onedark.vim'
Plug 'arcticicestudio/nord-vim'
Plug 'patstockwell/vim-monokai-tasty'
" colorscheme solarized
" let g:solarized_termcolors=256
" let g:solarized_termtrans=1
" let g:solarized_contrast="high"
" let g:solarized_visibility="high"

Plug 'rakr/vim-one'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'gosukiwi/vim-atom-dark'
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'wincent/terminus'
Plug 'kyoz/purify', { 'rtp': 'vim' }
Plug 'bluz71/vim-nightfly-guicolors'
Plug 'megantiu/true.vim'
Plug 'zanglg/nova.vim'
Plug 'overcache/NeoSolarized'
Plug 'lifepillar/vim-solarized8'
Plug 'ayu-theme/ayu-vim'
" let ayucolor="light"  " for light version of theme
" let ayucolor="mirage" " for mirage version of theme
let ayucolor="dark"   " for dark version of theme
Plug 'NLKNguyen/papercolor-theme'
Plug 'ackyshake/Spacegray.vim'
Plug 'balanceiskey/vim-framer-syntax'
Plug 'lewis6991/moonlight.vim'
Plug 'jdsimcoe/hyper.vim'
Plug 'mcmartelle/vim-monokai-bold'
Plug 'camgunz/amber'
Plug 'Zabanaa/neuromancer.vim'
Plug 'plainfingers/black_is_the_color'
Plug 'wdhg/dragon-energy'
Plug 'ludokng/vim-odyssey'

let g:molokai_original = 1
let g:rehash256 = 1
" >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

" (Completion plugin option 2)
" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

" Required for operations modifying multiple buffers like rename.
set hidden

    " \ 'rust': ['rust-analyzer'],
" let g:LanguageClient_serverCommands = {
"     \ 'rust': ['rustup', 'run', 'stable', 'rls'],
"     \ 'javascript': ['javascript-typescript-stdio'],
"     \ 'python': ['pyls'],
"     \ 'ruby': ['solargraph', 'stdio'],
"     \ 'go': ['gopls'],
"     \ 'c': ['ccls', '--log-file=/tmp/cc.log'],
"     \ 'cpp': ['ccls', '--log-file=/tmp/cc.log'],
"     \ 'cuda': ['ccls', '--log-file=/tmp/cc.log'],
"     \ 'objc': ['ccls', '--log-file=/tmp/cc.log'],
"     \ }
" let g:LanguageClient_autoStart = 1
" let g:LanguageClient_loadSettings = 1 " Use an absolute configuration path if you want system-wide settings
" nnoremap <leader>lcs :LanguageClientStart<CR>
"
" nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
" nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
" nnoremap <silent> gr :call LanguageClient#textDocument_references()<CR>
" nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
" " noremap <silent> Z :call LanguageClient_textDocument_definition()<CR>
" noremap <silent> R :call LanguageClient_textDocument_rename()<CR>
" noremap <silent> S :call LanguageClient_textDocument_documentSymbol()<CR>

" }}}

Plug 'preservim/tagbar'


Plug 'ryanoasis/vim-devicons'
" devicons config
" let g:webdevicons_enable_vimfiler = 0
" let g:webdevicons_conceal_nerdtree_brackets = 1
" let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
" let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
" let g:NERDTreeGitStatusNodeColorization = 1
" let g:webdevicons_enable_nerdtree = 0
let g:webdevicons_enable = 1
let g:webdevicons_enable_airline_tabline = 1
let g:webdevicons_enable_airline_statusline = 1
let g:WebDevIconsOS = 'Darwin'
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:DevIconsEnableFolderExtensionPatternMatching = 1

Plug 'bling/vim-airline'
Plug 'edkolev/tmuxline.vim'
Plug 'edkolev/promptline.vim'
let g:airline#extensions#tmuxline#enabled = 0
let g:airline#extensions#promptline#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#tab_nr_type= 1
let g:airline#extensions#tabline#show_tab_type = 1
let g:airline#extensions#tabline#tabs_label = ''
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
" Disable arrow icons at the left side of folders for NERDTree.
" let g:NERDTreeDirArrowExpandable = "\u00a0"
" let g:NERDTreeDirArrowCollapsible = "\u00a0"

Plug 'rhysd/git-messenger.vim'
Plug 'andymass/vim-matchup'
" let g:loaded_matchit = 1
" Plug 'farmergreg/vim-lastplace'
" Plug 'psliwka/vim-smoothie'
" Plug 'joeytwiddle/sexy_scroller.vim'

Plug 'tpope/vim-vinegar'

Plug 'github/copilot.vim'

" The fancy start screen for Vim.
Plug 'mhinz/vim-startify'
let g:startify_change_to_dir = 0
let g:startify_lists = [
      \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
      \ { 'type': 'files',     'header': ['   MRU']            },
      \ { 'type': 'sessions',  'header': ['   Sessions']       },
      \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
      \ { 'type': 'commands',  'header': ['   Commands']       },
      \ ]

" Terminal manager for (neo)vim
Plug 'voldikss/vim-floaterm'
" let g:floaterm_keymap_new = '<Leader>ft'

Plug 'Yggdroot/indentLine'
let g:indentLine_enabled = 0
let g:indentLine_char = '│'
" let g:indentLine_char_list = ['│', '|', '¦', '┆', '┊']

Plug 'ruanyl/vim-gh-line'

let g:gh_gitlab_domain = "registry.code.tuya-inc.top"
let g:gh_open_command = 'open '
let g:gh_line_blame_map_default = 0
let g:gh_line_blame_map = '<leader>ggb'

Plug 'lfe-support/vim-lfe'

Plug 'j-hui/fidget.nvim'

call plug#end()

if (has("nvim"))
    lua require"fidget".setup{}
endif

set conceallevel=3
if exists("g:loaded_webdevicons")
  call webdevicons#refresh()
endif

" set compatible

if $SHELL =~ 'bin/fish'
    set shell=/bin/bash
endif

set ffs=unix

" Searching ************************************************************** {{{
set hlsearch   " highlight search
set incsearch  " incremental search, search as you type
set ignorecase " Ignore case when searching
set smartcase  " Ignore case when searching lowercase
" }}}

set nopaste
set pastetoggle=<F3>
set number            " 显示行号
set autoindent        " 自动缩进
set smartindent       " 智能缩进
set hidden            " 隐藏缓冲区
set shiftwidth=4      " sw  设置自动缩进 2 个空格, 当然要设自动缩进先
set softtabstop=4     " sts 设置 softtabstop 为 4. 输入 tab 后就跳了 4 格
set tabstop=4         " 实际的 tab 即为 4 个空格, 而不是缺省的 8 个
set expandtab         " 在输入 tab 后, vim 用恰当的空格来填充这个 tab
" set diffopt+=vertical
if &diff
    set diffopt-=internal
    set diffopt+=vertical
endif
set virtualedit=all   " 光标可以定位在没有实际字符的地方
set isfname-==
set backspace=indent,eol,start
set cul

" Line Wrapping ********************************************************** {{{
set nowrap
set linebreak  " Wrap at word
" }}}

" Encoding *************************************************************** {{{
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,gbk,gb2312,default,latin1
" }}}

" Colors ***************************************************************** {{{
"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
" if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    if !has("nvim")
        " fix bug for vim
        set t_8f=[38;2;%lu;%lu;%lum
        set t_8b=[48;2;%lu;%lu;%lum
    endif

    " enable true color
    set termguicolors
  endif
" endif
if !has('nvim')
    set t_Co=256 " 256 colors
endif
"set t_Co=16

" syntax on "syntax 的设置一定要在colo之前，不然colo就会无效
if !exists('g:syntax_on')
	syntax enable
endif
" colorscheme gruvbox
colorscheme molokai
" colorscheme spacecamp
" let g:rainbow_active = 1
filetype plugin indent on   " File stuff
  " if has('vim_starting')
  "   if has('syntax') && !exists('g:syntax_on')
  "     syntax enable
  "   end
  " end

" colorscheme inkpot
" hi CursorLine   cterm=NONE ctermbg=235
"hi LineNr ctermbg=NONE " asdfkjaslkdf



" setup 'airblade/vim-gitgutter'
let g:gitgutter_set_sign_backgrounds = 1
let g:gitgutter_sign_allow_clobber = 1
let g:gitgutter_highlight_lines = 0
let g:gitgutter_highlight_linenrs = 1
set signcolumn=no

hi link GitGutterAddLineNr          DiffAdd               " default: links to CursorLineNr
hi link GitGutterChangeLineNr       DiffChange            " default: links to CursorLineNr
hi link GitGutterDeleteLineNr       DiffDelete            " default: links to CursorLineNr
hi link GitGutterChangeDeleteLineNr GitGutterChangeLineNr " default: links to CursorLineNr

" CocHighlightText, highlight current var
hi CocHighlightText ctermbg=8

" }}}

" detect filetype ******************************************************* {{{
au BufRead,BufNewFile *.edc setlocal filetype=edc
au BufRead,BufNewFile *.qml setlocal filetype=qml
autocmd BufReadPost *.rs setlocal filetype=rust

au BufRead,BufNewFile *.log{.\d}\\\{0,\} setlocal ft=log

au BufRead,BufNewFile *.eco setlocal filetype=html

au BufRead,BufNewFile {ci{.*}\|sys{.*}\|rebar\|reltool\|vars{.*}\|elvis\|app{.*}}.config{.script\|.example\|.src}\\\{0,1\} setlocal ft=erlang
au BufRead,BufNewFile {ci\|sys\|rebar\|reltool\|vars\|elvis\|app}{.*}\\\{0,1\}.config setlocal ft=erlang
au BufRead,BufNewFile rebar.lock setlocal ft=erlang
au BufRead,BufNewFile *.app.src setlocal ft=erlang
au BufRead,BufNewFile */priv/*.schema setlocal ft=erlang
au BufRead,BufNewFile vm{.*}\\\{0,1\}.args setlocal ft=config
autocmd BufReadPost erlang_ls.config setlocal filetype=yaml
au BufRead,BufNewFile */_build/**/{RELEASES\|*.{rel\|script\|config}} setlocal ft=erlang
let erlang_folding = 0
" exclude single quotes from delimitMate in Clojure code
autocmd FileType clojure,lisp,lfe let b:delimitMate_quotes = "\""
let g:clojure_align_multiline_strings = 1
" }}}


set directory=~/.vim/tmp/swap    " Set Swap directory
set nobk "关闭自动备份
set completeopt=noinsert,menuone,noselect
set undodir=~/.vim/tmp/undo
set undofile
set undolevels=1000
set undoreload=10000

" Status Line ************************************************************ {{{
set showcmd
set ruler " Show ruler
" set ch=2 " Make command line two lines high
" match LongLineWarning '\%120v.*' " Error format when a line is longer than 120
                                   " 对一些中文行不起作用
" }}}

" Invisible characters *************************************************** {{{
set listchars=trail:.,tab:>-,eol:$,nbsp:%,extends:>,precedes:<
set wildignore=*.swp,*.bak,*.pyc,*.class
set nolist
" }}}

" Mappings *************************************************************** {{{
let mapleader = ","
" Professor VIM says '87% of users prefer jj over esc', jj abrams disagrees
imap jj <Esc>
imap uu _
imap hh =>
imap aa @
imap <up> <C-o>gk
imap <down> <C-o>gj
imap .. ->
imap ,, <-
nmap <silent> <Leader>h :vsplit<CR>
nmap <silent> <Leader>v :split<CR>

" 选中后按/向后(?向前)直接搜索
vmap / y/<C-R>"<CR>
vmap ? y?<C-R>"<CR>
nmap <silent> <Leader>. :nohlsearch<CR>

" Shift
nmap > v><Esc>
" nmap <S-Tab> v<
" nmap <bs> v<
nmap < v<<Esc>
vmap > >gv
" vmap <S-Tab> <gv
" vmap <bs> <gv
vmap < <gv

" 查找下一个匹配点
" nmap <C-n> :cn<CR>
" nmap <C-p> :cp<CR>
nmap <M-n> :cn<CR>
nmap <M-p> :cp<CR>
nmap <M-1> gT
nmap <M-2> gt

nmap <Leader>on :only<CR>

vmap zc :'<,'>fold<CR>

" }}}

" format json
vmap <Leader>j !python -m json.tool<CR>

" http://stackoverflow.com/questions/2147875/what-vim-commands-can-be-used-to-quote-unquote-words
" Quote a word, using single quotes
nmap <Leader>'s ciw'<C-R>"'<Esc>
" Quote a word, using `` quotes
nmap <Leader>`s ciw`<C-R>"`<Esc>
" Quote a word, using double quotes
nmap <Leader>"s ciw"<C-R>""<Esc>
" Unquote a word that's enclosed in single quotes
nmap <Leader>'S di'hPl2x
" Unquote a word that's enclosed in double quotes
nmap <Leader>"S di"hPl2x
" Change single quotes to double or reverse
nmap <Leader>c' mpva':s/\%V'/"/g<CR>`p
nmap <Leader>c" mpva":s/\%V"/'/g<CR>`p

" let g:erlangManPath="/usr/local/lib/erlang/man"
" let $GROFF_NO_SGR=1
" source $VIMRUNTIME/ftplugin/man.vim
" nmap K :Man <cword><CR><C-W>L
" nmap K :call VimMan()<CR>

" Omni Completion ******************************************************** {{{
autocmd FileType html setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP
autocmd FileType c setlocal omnifunc=ccomplete#Complete
" May require ruby compiled in
autocmd FileType ruby,eruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType java setlocal omnifunc=javacomplete#Complete
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"=> Plugin configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Start interactive EasyAlign in visual mode
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign with a Vim movement
nmap <Leader><space>a <Plug>(EasyAlign)

" NERDTreDTree********************************************************** {{{
" map <F10> :NERDTreeToggle<CR>
" noremap <silent> <Leader>n :NERDTreeToggle<CR>
map <Leader>n <plug>NERDTreeTabsToggle<CR>
let g:nerdtree_tabs_open_on_gui_startup = 0

" User instead of Netrw when doing an edit /foobar
let NERDTreeHijackNetrw=1

" Single click for everything
let NERDTreeMouseMode=1

" Set ignore file regex
let NERDTreeIgnore=['\.vim$', '\.pyc$', '\.class$', '\.beam$', '^CVS$', '\~$', '\.lo$', '\.o$', '\.so$', '\.a$', '\.dylib', '\.so']
" }}}

" Netrw ****************************************************************** {{{
" let g:netrw_list_hide='^\..*'
" }}}

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'

" TagBar *************************************************************** {{{
" map <F8> :TagbarToggle<CR>
map <silent> <Leader>l :TagbarToggle<CR>
" map <silent> <Leader>f :TagbarToggle<CR><C-W><C-W>
" map <silent> <Leader>l :Vista!!<CR>
let g:tagbar_map_openallfolds = ""
let g:tagbar_type_elixir = {'ctagstype': 'elixir', 'kinds': ['f:functions:0:0', 'c:callbacks:0:0', 'd:delegates:0:0', 'e:exceptions:0:0', 'i:implementations:0:0', 'a:macros:0:0', 'o:operators:0:0', 'm:modules:0:0', 'p:protocols:0:0', 'r:records:0:0'], 'sro': '.', 'kind2scope': {'m': 'modules'}, 'scope2kind': {'modules': 'm'}}
let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }

" }}}

" Coc Key mappings
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)
" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction


" BufExplorer *********************************************************** {{{
:command BE BufExplorer
" map <silent> <Leader>b :BufExplorer<CR>
let g:bufExplorerDefaultHelp=0       " Do not show default help.
let g:bufExplorerShowRelativePath=1  " Show relative paths.
let g:bufExplorerSortBy='mru'        " Sort by most recently used.
let g:bufExplorerSplitRight=0        " Split left.
let g:bufExplorerSplitVertical=1     " Split vertically.
let g:bufExplorerSplitVertSize = 30  " Split width
let g:bufExplorerUseCurrentWindow=1  " Open in new window.
" }}}


" Cscope **************************************************************** {{{
if has("cscope")
        set csprg=/usr/local/bin/cscope
        set csto=0
        set cst
        set nocsverb
        " add any database in current directory
        if filereadable("cscope.out")
            cs add cscope.out
        " else add database pointed to by environment
        elseif $CSCOPE_DB != ""
            cs add $CSCOPE_DB
        endif
        set csverb
endif
"map g<C-]> :cs find 3 <C-R>=expand("<cword>")<CR><CR>
"map g<C-\> :cs find 0 <C-R>=expand("<cword>")<CR><CR>
nmap s<C-]> :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap g<C-]> :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap c<C-]> :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap t<C-]> :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap e<C-]> :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap f<C-]> :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap i<C-]> :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap d<C-]> :cs find d <C-R>=expand("<cword>")<CR><CR>
" }}}

" Airline
let g:airline_powerline_fonts=1


" http://stackoverflow.com/questions/39645253/clipboard-failure-in-tmux-vim-after-upgrading-to-macos-sierra
set clipboard=unnamed

let g:gitgutter_max_signs=5000

" promptline setting
let g:promptline_preset = {
        \'a' : [ promptline#slices#host() ],
        \'b' : [ promptline#slices#user() ],
        \'c' : [ promptline#slices#cwd() ],
        \'y' : [ promptline#slices#vcs_branch(), promptline#slices#git_status() ],
        \'warn' : [ promptline#slices#last_exit_code() ]}

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" GUI Setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""
" See ~/.gvimrc
source ~/.vim/gvimrc

" load .vimrc in current directory
set exrc
set updatetime=100

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Host specific
""""""""""""""""""""""""""""""""""""""""""""""""""""""
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

set pyxversion=3

nmap <silent> <Leader><Space>s :Startify<CR>
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_ShortcutF = '<C-P>'

" Mappings for FZF
" Mapping selecting mappings
nmap <silent> <Leader>f :Files<CR>
nmap <silent> <Leader>git :GitFiles<CR>
nmap <silent> <Leader>b :Buffers<CR>
nmap <silent> <Leader>gb :Git blame<CR>

autocmd BufRead,BufNewFile *.env{.*} setlocal ft=sh

" How do I get both NERDTree and Startify working at startup?~
autocmd VimEnter *
            \   if !argc()
            \ |   Startify
            \ |   NERDTree
            \ |   wincmd w
            \ | endif

"vim: fdm=marker
