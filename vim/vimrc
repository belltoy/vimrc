" Created by belltoy<belltoy@gmail.com>
" Homepage: http://belltoy.net/
" -----------------------------------------------------------------------------
" |                            VIM Settings                                   |
" |                   (see gvimrc for gui vim settings)                       |
" |                                                                           |
" | Some highlights:                                                          |
" |   jj = <esc>  Very useful for keeping your hands on the home row          |
" |   ,n = toggle NERDTree off and on                                         |
" |                                                                           |
" |  ",f = fuzzy find all files                                               |
" |  ",b = fuzzy find in all buffers                                          |
" |   ,f = toggle tag list window                                             |
" |                                                                           |
" |   hh = inserts '=>'                                                       |
" |   aa = inserts '@'                                                        |
" |                                                                           |
" |   ,h = new horizontal window                                              |
" |   ,v = new vertical window                                                |
" |                                                                           |
" |   ,i = toggle invisibles                                                  |
" |   ,, = set nohlsearch                                                     |
" |                                                                           |
" |   enter and shift-enter = adds a new line after/before the current line   |
" |                                                                           |
" |   :call Tabstyle_tabs = set tab to real tabs                              |
" |   :call Tabstyle_spaces = set tab to 2 spaces                             |
" |                                                                           |
" | Put machine/user specific settings in ~/.vimrc.local                      |
" -----------------------------------------------------------------------------

set nocompatible
call plug#begin('~/.vim/bundle')

Plug 'vim-scripts/L9'

Plug 'bling/vim-airline'
Plug 'edkolev/tmuxline.vim'
Plug 'edkolev/promptline.vim'
let g:airline#extensions#tmuxline#enabled = 0
let g:airline#extensions#promptline#enabled = 0
Plug 'thisivan/vim-bufexplorer'
Plug 'tmux-plugins/vim-tmux'
Plug 'christoomey/vim-tmux-navigator'
nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
Plug 'tpope/vim-fugitive'
Plug 'mattn/emmet-vim'
Plug 'vim-scripts/vcscommand.vim'
Plug 'airblade/vim-gitgutter'
Plug 'mattn/gist-vim'
Plug 'tpope/vim-surround'
Plug 'pearofducks/ansible-vim'

" FZF
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'junegunn/vim-easy-align'

Plug 'majutsushi/tagbar'

Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tomtom/tcomment_vim'
Plug 'mustache/vim-mustache-handlebars'
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'
Plug 'abra/vim-obsidian'
Plug 'jdkanani/vim-material-theme'
Plug 'morhetz/gruvbox'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mhinz/vim-grepper' ", { 'on': ['Grepper', '<plug>(GrepperOperator)'] }
Plug 'jremmen/vim-ripgrep'
let g:grepper = {
    \ 'tools': ['rg', 'ack', 'grep', 'git'],
    \ }
let g:grepper.highlight = 1
let g:grepper.jump = 1
nnoremap <leader>g :Grepper<cr>
let g:grepper.prompt_mapping_tool = '<leader>g'

let g:ctrlp_map = '<Leader>t'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_custom_ignore = {
    \ 'file': '\v(\.beam)$'
    \ }
" Plug 'jaxbot/github-issues.vim'
"Plug 'rizzatti/funcoo.vim'
"Plug 'rizzatti/dash.vim'
Plug 'asins/vimcdoc'
Plug 'terryma/vim-multiple-cursors'
" Default mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
Plug 'Raimondi/delimitMate'
Plug 'mattn/webapi-vim'

" snipmate
" VimL only
" Plug 'MarcWeber/vim-addon-mw-utils'
" Plug 'tomtom/tlib_vim'
" Plug 'garbas/vim-snipmate'

" ultisnips need python support
Plug 'SirVer/ultisnips'
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" Optional:
Plug 'honza/vim-snippets'

" Press enter key to trigger snippet expansion
" The parameters are the same as `:help feedkeys()`
inoremap <silent> <expr> <CR> ncm2_ultisnips#expand_or("\<CR>", 'n')

" c-j c-k for moving in snippet
" let g:UltiSnipsExpandTrigger		= "<Plug>(ultisnips_expand)"
let g:UltiSnipsJumpForwardTrigger	= "<c-j>"
let g:UltiSnipsJumpBackwardTrigger	= "<c-k>"
let g:UltiSnipsRemoveSelectModeMappings = 0

" Language syntax support
" Plug 'jceb/vim-orgmode'
Plug 'hdima/python-syntax'
let python_highlight_all = 1

Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_fenced_languages = ['clj=clojure']

" Plug 'tpope/vim-markdown'

" Plug 'gabrielelana/vim-markdown'
" Plug 'hallison/vim-markdown'

Plug 'elzr/vim-json'
let g:vim_json_syntax_conceal = 0
Plug 'fatih/vim-go'
let g:go_fmt_autosave = 0
let g:go_bin_path = expand("~/.gotools")
Plug 'belltoy/vim-protobuf'
Plug 'othree/html5.vim'
Plug 'aliva/vim-fish'
Plug 'digitaltoad/vim-jade'
Plug 'groenewege/vim-less'
Plug 'jimenezrick/vimerl'
Plug 'kchmck/vim-coffee-script'
Plug 'elixir-lang/vim-elixir'
Plug 'slashmili/alchemist.vim'
Plug 'thinca/vim-ref'
let g:ref_man_cmd = "man 3"
Plug 'keith/swift.vim'
Plug 'kelan/gyp.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'

"" 开启rust的自动reformat的功能
let g:rustfmt_autosave = 0
let g:formatdef_rustfmt = '"rustfmt"'
let g:formatters_rust = ['rustfmt']
Plug 'Chiel92/vim-autoformat'
let g:racer_cmd = "~/.cargo/bin/racer"
let g:racer_experimental_completer = 1
" let $RUST_SRC_PATH="<path-to-rust-srcdir>/src/"
" au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap K <Plug>(rust-doc)

Plug 'cespare/vim-toml'
Plug 'neomake/neomake'
Plug 'mileszs/ack.vim'
let g:ackprg = 'ag --nogroup --nocolor --column'
Plug 'bronson/vim-trailing-whitespace'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'othree/yajs.vim'
Plug 'einars/js-beautify'
Plug 'isRuslan/vim-es6'
Plug 'mxw/vim-jsx'
" Plug 'Lokaltog/vim-easymotion'

"""""""""""" Clojure """""""""""""""
" Plug 'guns/vim-clojure-static'
" Plug 'tpope/vim-salve'
" Plug 'tpope/vim-projectionist'
" Plug 'tpope/vim-dispatch'
" Plug 'tpope/vim-fireplace'
" Plug 'kien/rainbow_parentheses.vim'
" Plug 'luochen1990/rainbow'
Plug 'guns/vim-sexp',    {'for': 'clojure'}
Plug 'liquidz/vim-iced', {'for': 'clojure'}
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'guns/vim-clojure-highlight'
Plug 'vim-scripts/paredit.vim'
Plug 'derekwyatt/vim-scala'
Plug 'artur-shaik/vim-javacomplete2'
Plug 'davidzchen/jproperties.vim'

let g:clojure_syntax_keywords = {
    \ 'clojureMacro': ["defproject", "defcustom", "defspout", "defbolt"],
    \ 'clojureFunc': ["string/join", "string/replace"]
    \ }
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

" Maybe Conflict with SirVer/ultisnips
Plug 'editorconfig/editorconfig-vim'

Plug 'mxw/vim-jsx'

" syntastic is too slow
" Plug 'vim-syntastic/syntastic'

" << LSP >> {{{

" Plug 'autozimu/LanguageClient-neovim', {
"     \ 'branch': 'next',
"     \ 'do': 'bash install.sh',
"     \ }


" Plug 'ryanoasis/vim-devicons'
" devicons config
if exists("g:loaded_webdevicons")
  call webdevicons#refresh()
endif
let g:airline_powerline_fonts = 1
let g:webdevicons_enable_vimfiler = 0
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
" let g:NERDTreeGitStatusNodeColorization = 1
let g:NERDTreeGitStatusWithFlags = 1


" (Optional) Multi-entry selection UI.

" (Completion plugin option 1)
if has('nvim')
    " assuming your using vim-plug: https://github.com/junegunn/vim-plug
    Plug 'autozimu/LanguageClient-neovim', { 'do': ':UpdateRemotePlugins' }
    Plug 'ncm2/ncm2'
    Plug 'roxma/nvim-yarp'

    " enable ncm2 for all buffers
    autocmd BufEnter * call ncm2#enable_for_buffer()

    " IMPORTANTE: :help Ncm2PopupOpen for more information
    set completeopt=noinsert,menuone,noselect

    " NOTE: you need to install completion sources to get completions. Check
    " our wiki page for a list of sources: https://github.com/ncm2/ncm2/wiki
    Plug 'ncm2/ncm2-bufword'
    Plug 'ncm2/ncm2-tmux'
    Plug 'ncm2/ncm2-path'
    Plug 'ncm2/ncm2-racer'
    Plug 'ncm2/ncm2-ultisnips'
else
    Plug 'roxma/vim-hug-neovim-rpc'
    Plug 'roxma/nvim-yarp'
endif
" (Completion plugin option 2)
" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

" Required for operations modifying multiple buffers like rename.
set hidden

let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'stable', 'rls'],
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'javascript.jsx': ['javascript-typescript-stdio'],
    \ 'python': ['pyls'],
    \ 'go': ['go-langserver'],
    \ }
let g:LanguageClient_autoStart = 1
nnoremap <leader>lcs :LanguageClientStart<CR>

nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
" noremap <silent> Z :call LanguageClient_textDocument_definition()<CR>
noremap <silent> R :call LanguageClient_textDocument_rename()<CR>
noremap <silent> S :call LanugageClient_textDocument_documentSymbol()<CR>

" }}}

call plug#end()

" set compatible

if $SHELL =~ 'bin/fish'
    set shell=/bin/bash
endif

set ffs=unix

" Searching ************************************************************** {{{
set hlsearch   " highlight search
set incsearch  " incremental search, search as you type
set ignorecase " Ignore case when searching
set smartcase  " Ignore case when searching lowercase
" }}}

set nopaste
set pastetoggle=<F3>
set number            " 显示行号
set autoindent        " 自动缩进
set smartindent       " 智能缩进
set hidden            " 隐藏缓冲区
set shiftwidth=4      " sw  设置自动缩进 2 个空格, 当然要设自动缩进先
set softtabstop=4     " sts 设置 softtabstop 为 4. 输入 tab 后就跳了 4 格
set tabstop=4         " 实际的 tab 即为 4 个空格, 而不是缺省的 8 个
set expandtab         " 在输入 tab 后, vim 用恰当的空格来填充这个 tab
set diffopt+=vertical
set virtualedit=all   " 光标可以定位在没有实际字符的地方
set isfname-==
set backspace=indent,eol,start
set cul

" Line Wrapping ********************************************************** {{{
set nowrap
set linebreak  " Wrap at word
" }}}

" Encoding *************************************************************** {{{
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,gbk,gb2312,default,latin1
" }}}

" Colors ***************************************************************** {{{
if !has('nvim')
    set t_Co=256 " 256 colors
endif
"set t_Co=16

syntax on "syntax 的设置一定要在colo之前，不然colo就会无效
"colorscheme mine
" colorscheme solarized
" let g:solarized_termcolors=256
" let g:solarized_termtrans=1
" let g:solarized_contrast="high"
" let g:solarized_visibility="high"

let g:molokai_original = 1
let g:rehash256 = 1
colorscheme molokai
" let g:rainbow_active = 1
filetype plugin indent on   " File stuff

" colorscheme inkpot
" hi CursorLine   cterm=NONE ctermbg=235
hi LineNr ctermbg=NONE
" }}}

" detect filetype ******************************************************* {{{
au BufRead,BufNewFile *.edc setlocal filetype=edc
au BufRead,BufNewFile *.qml setlocal filetype=qml
autocmd BufReadPost *.rs setlocal filetype=rust

au BufRead,BufNewFile *.eco setlocal filetype=html

au BufRead,BufNewFile sys.config setlocal ft=erlang
au BufRead,BufNewFile rebar.config setlocal ft=erlang
au BufRead,BufNewFile reltool.config setlocal ft=erlang
au BufRead,BufNewFile vars.config setlocal ft=erlang
au BufRead,BufNewFile *.src setlocal ft=erlang
let erlang_folding = 1
" exclude single quotes from delimitMate in Clojure code
autocmd FileType clojure,lisp let b:delimitMate_quotes = "\""
let g:clojure_align_multiline_strings = 1
" }}}
" Always On:
" au VimEnter * RainbowParenthesesToggle
" autocmd VimEnter,BufRead,BufWinEnter,BufNewFile * RainbowParenthesesToggle
" autocmd VimEnter,BufRead,BufWinEnter,BufNewFile * RainbowToggle
autocmd VimEnter,BufRead,BufWinEnter,BufNewFile * RainbowParentheses
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
" au Syntax * RainbowParenthesesLoadRound
" au Syntax * RainbowParenthesesLoadSquare
" au Syntax * RainbowParenthesesLoadBraces
" " Rainbow Parentheses options {
"     function! Config_Rainbow()
"         call rainbow_parentheses#load(0) " Load Round brackets
"         call rainbow_parentheses#load(1) " Load Square brackets
"         call rainbow_parentheses#load(2) " Load Braces
"         autocmd! TastetheRainbow VimEnter * call Load_Rainbow() " 64bit Hack - Set VimEnter after syntax load
"     endfunction
"
"     function! Load_Rainbow()
"         call rainbow_parentheses#activate()
"     endfunction
"
"     augroup TastetheRainbow
"         autocmd!
"         autocmd Syntax * call Config_Rainbow() " Load rainbow_parentheses on syntax load
"         autocmd VimEnter,BufRead,BufWinEnter,BufNewFile * call Load_Rainbow()
"     augroup END
"
"     " rainbow_parentheses toggle
"     nnoremap <silent> <Leader>t :call rainbow_parentheses#toggle()<CR>
" " }

set directory=~/.vim/tmp/swap    " Set Swap directory
set nobk "关闭自动备份
set completeopt=noinsert,menuone,noselect
set undodir=~/.vim/tmp/undo
set undofile
set undolevels=1000
set undoreload=10000

" Status Line ************************************************************ {{{
set showcmd
set ruler " Show ruler
" set ch=2 " Make command line two lines high
" match LongLineWarning '\%120v.*' " Error format when a line is longer than 120
                                   " 对一些中文行不起作用
" }}}

" Invisible characters *************************************************** {{{
set listchars=trail:.,tab:>-,eol:$,nbsp:%,extends:>,precedes:<
set wildignore=*.swp,*.bak,*.pyc,*.class
set nolist
" }}}

" Mappings *************************************************************** {{{
let mapleader = ","
" Professor VIM says '87% of users prefer jj over esc', jj abrams disagrees
imap jj <Esc>
imap uu _
imap hh =>
imap aa @
imap <up> <C-o>gk
imap <down> <C-o>gj
imap .. ->
nmap <silent> <Leader>h :vsplit<CR>
nmap <silent> <Leader>v :split<CR>

" 选中后按/向后(?向前)直接搜索
vmap / y/<C-R>"<CR>
vmap ? y?<C-R>"<CR>
nmap <silent> <Leader>. :nohlsearch<CR>

" Shift
nmap > v><Esc>
" nmap <S-Tab> v<
" nmap <bs> v<
nmap < v<<Esc>
vmap > >gv
" vmap <S-Tab> <gv
" vmap <bs> <gv
vmap < <gv

" 查找下一个匹配点
" nmap <C-n> :cn<CR>
" nmap <C-p> :cp<CR>
nmap <M-n> :cn<CR>
nmap <M-p> :cp<CR>
nmap <M-1> gT
nmap <M-2> gt

nmap <Leader>on :only<CR>

vmap zc :'<,'>fold<CR>

" }}}

" format json
vmap <Leader>j !python -m json.tool<CR>

" http://stackoverflow.com/questions/2147875/what-vim-commands-can-be-used-to-quote-unquote-words
" Quote a word, using single quotes
nmap <Leader>'s ciw'<C-R>"'<Esc>
" Unquote a word that's enclosed in single quotes
nmap <Leader>'S di'hPl2x
" Quote a word, using double quotes
nmap <Leader>"s ciw"<C-R>""<Esc>
" Unquote a word that's enclosed in double quotes
nmap <Leader>"S di"hPl2x
" Change single quotes to double or reverse
nmap <Leader>c' mpva':s/\%V'/"/g<CR>`p
nmap <Leader>c" mpva":s/\%V"/'/g<CR>`p

" let g:erlangManPath="/usr/local/lib/erlang/man"
" let $GROFF_NO_SGR=1
" source $VIMRUNTIME/ftplugin/man.vim
" nmap K :Man <cword><CR><C-W>L
" nmap K :call VimMan()<CR>

" Omni Completion ******************************************************** {{{
autocmd FileType html setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP
autocmd FileType c setlocal omnifunc=ccomplete#Complete
" May require ruby compiled in
autocmd FileType ruby,eruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType java setlocal omnifunc=javacomplete#Complete
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"=> Plugin configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Start interactive EasyAlign in visual mode
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign with a Vim movement
nmap <Leader>a <Plug>(EasyAlign)

" VCSCommand ********************************************************** {{{
" nmap ,ca <Plug>VCSAdd
"
" The default mappings are begin with c:
"
nmap <Leader>va <Plug>VCSAdd
nmap <Leader>vn <Plug>VCSAnnotate
nmap <Leader>vb <Plug>VCSBlame
nmap <Leader>vN <Plug>VCSAnnotate!
nmap <Leader>vc <Plug>VCSCommit
nmap <Leader>vD <Plug>VCSDelete
nmap <Leader>vd <Plug>VCSDiff
nmap <Leader>vg <Plug>VCSGotoOriginal
nmap <Leader>vG <Plug>VCSGotoOriginal!
nmap <Leader>vi <Plug>VCSInfo
nmap <Leader>vl <Plug>VCSLog
nmap <Leader>vL <Plug>VCSLock
nmap <Leader>vr <Plug>VCSReview
nmap <Leader>vs <Plug>VCSStatus
nmap <Leader>vu <Plug>VCSUpdate
nmap <Leader>vU <Plug>VCSUnlock
nmap <Leader>vv <Plug>VCSVimDiff

" NERDTreDTree********************************************************** {{{
" map <F10> :NERDTreeToggle<CR>
" noremap <silent> <Leader>n :NERDTreeToggle<CR>
map <Leader>n <plug>NERDTreeTabsToggle<CR>
let g:nerdtree_tabs_open_on_gui_startup = 0

" User instead of Netrw when doing an edit /foobar
let NERDTreeHijackNetrw=1

" Single click for everything
let NERDTreeMouseMode=1

" Set ignore file regex
let NERDTreeIgnore=['\.vim$', '\.pyc$', '\.class$', '\.beam$', '^CVS$', '\~$', '\.lo$', '\.o$', '\.so$', '\.a$', '\.dylib', '\.so']
" }}}

" Netrw ****************************************************************** {{{
" let g:netrw_list_hide='^\..*'
" }}}

" Mappings for FZF
" Mapping selecting mappings
nmap <Leader>f :Files<CR>
nmap <Leader>git :GitFiles<CR>
nmap <Leader>b :Buffers<CR>

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'

" TagBar *************************************************************** {{{
map <F8> :TagbarToggle<CR>
map <silent> <Leader>l :TagbarToggle<CR>
" map <silent> <Leader>f :TagbarToggle<CR><C-W><C-W>
let g:tagbar_type_elixir = {'ctagstype': 'elixir', 'kinds': ['f:functions:0:0', 'c:callbacks:0:0', 'd:delegates:0:0', 'e:exceptions:0:0', 'i:implementations:0:0', 'a:macros:0:0', 'o:operators:0:0', 'm:modules:0:0', 'p:protocols:0:0', 'r:records:0:0'], 'sro': '.', 'kind2scope': {'m': 'modules'}, 'scope2kind': {'modules': 'm'}}
let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }

" }}}


" BufExplorer *********************************************************** {{{
:command BE BufExplorer
" map <silent> <Leader>b :BufExplorer<CR>
let g:bufExplorerDefaultHelp=0       " Do not show default help.
let g:bufExplorerShowRelativePath=1  " Show relative paths.
let g:bufExplorerSortBy='mru'        " Sort by most recently used.
let g:bufExplorerSplitRight=0        " Split left.
let g:bufExplorerSplitVertical=1     " Split vertically.
let g:bufExplorerSplitVertSize = 30  " Split width
let g:bufExplorerUseCurrentWindow=1  " Open in new window.
" }}}


" Cscope **************************************************************** {{{
if has("cscope")
        set csprg=/usr/local/bin/cscope
        set csto=0
        set cst
        set nocsverb
        " add any database in current directory
        if filereadable("cscope.out")
            cs add cscope.out
        " else add database pointed to by environment
        elseif $CSCOPE_DB != ""
            cs add $CSCOPE_DB
        endif
        set csverb
endif
"map g<C-]> :cs find 3 <C-R>=expand("<cword>")<CR><CR>
"map g<C-\> :cs find 0 <C-R>=expand("<cword>")<CR><CR>
nmap s<C-]> :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap g<C-]> :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap c<C-]> :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap t<C-]> :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap e<C-]> :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap f<C-]> :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap i<C-]> :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap d<C-]> :cs find d <C-R>=expand("<cword>")<CR><CR>
" }}}

" pyditcion ************************************************************** {{{
"let g:pydiction_location = '~/etc/vimrc/vim/bundle/Pydiction/complete-dict'
" }}}

" Airline
let g:airline_powerline_fonts=1

" jscs returns exit code when no config file is present.
" Only load it when appropriate.
function! JavascriptCheckers()
  if filereadable(getcwd() . '/.jscsrc')
    return ['jshint', 'jscs']
  else
    return ['jshint']
  endif
endfunction

" http://stackoverflow.com/questions/39645253/clipboard-failure-in-tmux-vim-after-upgrading-to-macos-sierra
set clipboard=unnamed

let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '!'
let g:syntastic_javascript_checkers = JavascriptCheckers()
" let g:syntastic_javascript_jshint_config = ['.jshintrc', '.jscsrc']

let g:gitgutter_max_signs=5000

" promptline setting
let g:promptline_preset = {
        \'a' : [ promptline#slices#host() ],
        \'b' : [ promptline#slices#user() ],
        \'c' : [ promptline#slices#cwd() ],
        \'y' : [ promptline#slices#vcs_branch(), promptline#slices#git_status() ],
        \'warn' : [ promptline#slices#last_exit_code() ]}

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" GUI Setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""
" See ~/.gvimrc
source ~/.vim/gvimrc

" load .vimrc in current directory
set exrc

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Host specific
""""""""""""""""""""""""""""""""""""""""""""""""""""""
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

"vim: fdm=marker
